summary(olsfit)
#### LASSO fit
lassofit <- glmnet(x=X,y=Y,alpha=1,nlambda=100)
coef(fit, s = 0.18, exact = FALSE)
coef(lassofit, s = 0.18, exact = FALSE)
print(lassofit)
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
coef(lassofit, s = lambda.min, exact = FALSE)
coef(lassofit, s = "lambda.min", exact = FALSE)
summary(olsfit)
olsfit <- lm(Y ~ X)
summary(olsfit)
Y <- X[,1] + 7*X[,2] - 3*X[,3] + 5*X[,4] - 10*X[,5] + rnorm(n_obs)
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
coef(lassofit, s = "lambda.min", exact = FALSE)
print(lassofit)
coef(lassofit, s = "lambda.1se", exact = FALSE)
summary(olsfit)
summary(lassofit)
lassofit$lambda.min
print(lambda.min)
print(lassofit)
ridgefit <- cv.glmnet(x=X,y=Y,alpha=0,nlambda=100)
coef(ridgefit, s = "lambda.min", exact = FALSE)
coef(ridgefit, s = "lambda.1se", exact = FALSE)
enetfit <- cv.glmnet(x=X,y=Y,alpha=0.5,nlambda=100)
coef(enetfit, s = "lambda.min", exact = FALSE)
coef(enetfit, s = "lambda.1se", exact = FALSE)
enetfit <- cv.glmnet(x=X,y=Y,alpha=0.1,nlambda=100)
coef(enetfit, s = "lambda.min", exact = FALSE)
coef(enetfit, s = "lambda.1se", exact = FALSE)
enetfit <- cv.glmnet(x=X,y=Y,alpha=0.9,nlambda=100)
coef(enetfit, s = "lambda.min", exact = FALSE)
coef(enetfit, s = "lambda.1se", exact = FALSE)
coef(lassofit, s = "lambda.1se", exact = FALSE)
summary(olsfit)
coef(lassofit, s="lambda.1se", exact=FALSE)
set.seed <- 10
n_covs <- 10 #number of covariates
n_obs <- 50 #number of observations
seedpoints <- runif(n_covs,min=0,max=1) #random numbers to plug into sines for X
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seedpoints[i]*step)
}
#### The Y variable
Y <- X[,1] + 7*X[,2] - 3*X[,3] + 5*X[,4] - 10*X[,5] + rnorm(n_obs)
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
coef(lassofit, s = "lambda.min", exact = FALSE)
coef(lassofit, s = "lambda.1se", exact = FALSE)
set.seed <- 10
n_covs <- 10 #number of covariates
n_obs <- 20 #number of observations
seedpoints <- runif(n_covs,min=0,max=1) #random numbers to plug into sines for X
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seedpoints[i]*step)
}
#### The Y variable
Y <- X[,1] + 7*X[,2] - 3*X[,3] + 5*X[,4] - 10*X[,5] + rnorm(n_obs)
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
coef(lassofit, s = "lambda.min", exact = FALSE)
coef(lassofit, s = "lambda.1se", exact = FALSE)
set.seed <- 10
n_covs <- 50 #number of covariates
n_obs <- 100 #number of observations
seedpoints <- runif(n_covs,min=0,max=1) #random numbers to plug into sines for X
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seedpoints[i]*step)
}
#### The Y variable
Y <- X[,1] + 7*X[,2] - 3*X[,3] + 5*X[,4] - 10*X[,5] + rnorm(n_obs)
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
coef(lassofit, s = "lambda.min", exact = FALSE)
coef(lassofit, s = "lambda.1se", exact = FALSE)
n_covs <- 75 #number of covariates
n_obs <- 100 #number of observations
seedpoints <- runif(n_covs,min=0,max=1) #random numbers to plug into sines for X
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seedpoints[i]*step)
}
#### The Y variable
Y <- X[,1] + 7*X[,2] - 3*X[,3] + 5*X[,4] - 10*X[,5] + rnorm(n_obs)
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
coef(lassofit, s = "lambda.min", exact = FALSE)
coef(lassofit, s = "lambda.1se", exact = FALSE)
n_covs <- 25 #number of covariates
n_obs <- 100 #number of observations
seedpoints <- runif(n_covs,min=0,max=1) #random numbers to plug into sines for X
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seedpoints[i]*step)
}
#### The Y variable
Y <- X[,1] + 7*X[,2] - 3*X[,3] + 5*X[,4] - 10*X[,5] + rnorm(n_obs)
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
coef(lassofit, s = "lambda.min", exact = FALSE)
coef(lassofit, s = "lambda.1se", exact = FALSE)
summarycoef(olsfit)
coef(olsfit)
lasso_min <- coef(lassofit, s = "lambda.min", exact = FALSE)
lasso_1se <- coef(lassofit, s = "lambda.1se", exact = FALSE)
ols_coefs <- coef(olsfit)
test <- as.matrix(lasso_1se)
test
?sample()
ols_coefs
class(ols_coefs)
as.matrix(ols_coefs)
as.matrix(ols_coefs)[2:6,1]
as.matrix(lasso_min)[2:6,1]
test <- cbind(as.matrix(ols_coefs)[2:6,1])
test
test2 <- cbind(test2,as.matrix(ols_coefs)[2:6,1])
test2 <- rep(0,length=5)
test2 <- cbind(test2,as.matrix(ols_coefs)[2:6,1])
test2
test2 <- cbind(test2,as.matrix(ols_coefs)[2:6,1])
test2 <- cbind(test2,as.matrix(ols_coefs)[2:6,1])
test2 <- cbind(test2,as.matrix(ols_coefs)[2:6,1])
test2 <- cbind(test2,as.matrix(ols_coefs)[2:6,1])
test2
test2 <- test2[,-1]
test2
rm(list=ls())
set.seed <- 102030 #for reproducibility
n_covs <- 25 #number of covariates
n_obs <- 100 #number of observations
seeds <- runif(1000,min=0,max=1) #uniform draws for numbers to plug into sines in X
n_iter <- 100 #number of iterations
### initialize coefficient storage
ols_coefs <- rep(0,length=5)
lasso_min <- rep(0,length=5)
lasso_1se <- rep(0,length=5)
for(j in 1:n_iter) { #outer monte carlo loop
#### The DGP
seeds_sample <- sample(seeds, n_covs, replace=FALSE) #random sample from the seeds
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seeds_sample[i]*step) #sines - deterministic regressors
}
#### The Y variable
Y <- X[,1] + 3*X[,2] - 5*X[,3] + 7*X[,4] - 10*X[,5] + rnorm(n_obs) #linear combination of sines + gaussian noise
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
ols_coefs <- coef(olsfit) #store coefficients from this run
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
lasso_min <- coef(lassofit, s = "lambda.min", exact = FALSE) #store coefficients from this run
lasso_1se <- coef(lassofit, s = "lambda.1se", exact = FALSE) #store coefficients from this run
}
lassofit
lasso_min
rm(list=ls())
n_covs <- 25 #number of covariates
n_obs <- 100 #number of observations
seeds <- runif(1000,min=0,max=1) #uniform draws for numbers to plug into sines in X
n_iter <- 100 #number of iterations
### initialize coefficient storage
ols_coefs <- rep(0,length=5)
lasso_min <- rep(0,length=5)
lasso_1se <- rep(0,length=5)
for(j in 1:n_iter) { #outer monte carlo loop
#### The DGP
seeds_sample <- sample(seeds, n_covs, replace=FALSE) #random sample from the seeds
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seeds_sample[i]*step) #sines - deterministic regressors
}
#### The Y variable
Y <- X[,1] + 3*X[,2] - 5*X[,3] + 7*X[,4] - 10*X[,5] + rnorm(n_obs) #linear combination of sines + gaussian noise
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
ols_coefs <- cbind(ols_coefs,coef(olsfit)) #store coefficients from this run
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
lasso_min <- cbind(lasso_min,coef(lassofit, s = "lambda.min", exact = FALSE)) #store coefficients from this run
lasso_1se <- cbind(lasso_1se,coef(lassofit, s = "lambda.1se", exact = FALSE)) #store coefficients from this run
}
#### Cleaning up a bit
ols_coefs <- ols_coefs[,-1]
lasso_min <- lasso_min[,-1]
lasso_1se <- lasso_1se[,-1]
rm(list=ls())
n_covs <- 25 #number of covariates
n_obs <- 100 #number of observations
seeds <- runif(1000,min=0,max=1) #uniform draws for numbers to plug into sines in X
n_iter <- 100 #number of iterations
### initialize coefficient storage
ols_coefs <- rep(0,length=5)
lasso_min <- rep(0,length=5)
lasso_1se <- rep(0,length=5)
for(j in 1:n_iter) { #outer monte carlo loop
#### The DGP
seeds_sample <- sample(seeds, n_covs, replace=FALSE) #random sample from the seeds
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seeds_sample[i]*step) #sines - deterministic regressors
}
#### The Y variable
Y <- X[,1] + 3*X[,2] - 5*X[,3] + 7*X[,4] - 10*X[,5] + rnorm(n_obs) #linear combination of sines + gaussian noise
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
ols_coefs <- cbind(ols_coefs,as.matrix(coef(olsfit))[2:6,1]) #store coefficients from this run
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
lasso_min <- cbind(lasso_min,as.matrix(coef(lassofit, s = "lambda.min", exact = FALSE)[2:6,1])) #store coefficients from this run
lasso_1se <- cbind(lasso_1se,as.matrix(coef(lassofit, s = "lambda.1se", exact = FALSE)[2:6,1])) #store coefficients from this run
}
#### Cleaning up a bit
ols_coefs <- ols_coefs[,-1]
lasso_min <- lasso_min[,-1]
lasso_1se <- lasso_1se[,-1]
ols_coefs
lasso_min
lasso_1se
ggplot(ols_coefs,aes(x=ols_coefs[1,]) + geom_histogram(binwidth=.5)
ggplot(ols_coefs,aes(x=ols_coefs[1,])) + geom_histogram(binwidth=.5)
library(ggplot2)
ggplot(ols_coefs,aes(x=ols_coefs[1,])) + geom_histogram(binwidth=.5)
rm(list=ls())
n_covs <- 25 #number of covariates
n_obs <- 100 #number of observations
seeds <- runif(1000,min=0,max=1) #uniform draws for numbers to plug into sines in X
n_iter <- 100 #number of iterations
### initialize coefficient storage
ols_coefs <- rep(0,length=5)
lasso_min <- rep(0,length=5)
lasso_1se <- rep(0,length=5)
for(j in 1:n_iter) { #outer monte carlo loop
#### The DGP
seeds_sample <- sample(seeds, n_covs, replace=FALSE) #random sample from the seeds
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seeds_sample[i]*step) #sines - deterministic regressors
}
#### The Y variable
Y <- X[,1] + 3*X[,2] - 5*X[,3] + 7*X[,4] - 10*X[,5] + rnorm(n_obs) #linear combination of sines + gaussian noise
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
ols_coefs <- cbind(ols_coefs,as.matrix(coef(olsfit))[2:6,1]) #store coefficients from this run
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
lasso_min <- cbind(lasso_min,as.matrix(coef(lassofit, s = "lambda.min", exact = FALSE)[2:6,1])) #store coefficients from this run
lasso_1se <- cbind(lasso_1se,as.matrix(coef(lassofit, s = "lambda.1se", exact = FALSE)[2:6,1])) #store coefficients from this run
}
#### Cleaning up a bit
ols_coefs <- as.data.frame(ols_coefs[,-1])
lasso_min <- as.data.frame(lasso_min[,-1])
lasso_1se <- as.data.frame(lasso_1se[,-1])
ggplot(ols_coefs,aes(x=ols_coefs[1,])) + geom_histogram(binwidth=.5)
ggplot(ols_coefs,aes(x=ols_coefs[1,])) + geom_histogram()
head(ols_coefs)
ggplot(ols_coefs,aes(x=X1)) + geom_histogram()
rm(list=ls())
n_covs <- 25 #number of covariates
n_obs <- 100 #number of observations
seeds <- runif(1000,min=0,max=1) #uniform draws for numbers to plug into sines in X
n_iter <- 100 #number of iterations
### initialize coefficient storage
ols_coefs <- rep(0,length=5)
lasso_min <- rep(0,length=5)
lasso_1se <- rep(0,length=5)
for(j in 1:n_iter) { #outer monte carlo loop
#### The DGP
seeds_sample <- sample(seeds, n_covs, replace=FALSE) #random sample from the seeds
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seeds_sample[i]*step) #sines - deterministic regressors
}
#### The Y variable
Y <- X[,1] + 3*X[,2] - 5*X[,3] + 7*X[,4] - 10*X[,5] + rnorm(n_obs) #linear combination of sines + gaussian noise
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
ols_coefs <- rbind(ols_coefs,as.matrix(coef(olsfit))[2:6,1]) #store coefficients from this run
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
lasso_min <- rbind(lasso_min,as.matrix(coef(lassofit, s = "lambda.min", exact = FALSE)[2:6,1])) #store coefficients from this run
lasso_1se <- rbind(lasso_1se,as.matrix(coef(lassofit, s = "lambda.1se", exact = FALSE)[2:6,1])) #store coefficients from this run
}
#### Cleaning up a bit
ols_coefs <- as.data.frame(ols_coefs[-1,])
lasso_min <- as.data.frame(lasso_min[-1,])
lasso_1se <- as.data.frame(lasso_1se[-1,])
head(ols_coefs)
head(lasso_min)
as.matrix(coef(lassofit, s = "lambda.min", exact = FALSE)[2:6,1])
as.numeric(coef(lassofit, s = "lambda.min", exact = FALSE)[2:6,1])
as.numeric(coef(olsfit))[2:6,1]
as.numeric(coef(olsfit)[2:6,1])
as.matrix(coef(olsfit))[2:6,1]
as.matrix(coef(lassofit, s = "lambda.min", exact = FALSE))[2:6,1]
lasso_1se <- rbind(lasso_1se,as.matrix(coef(lassofit, s = "lambda.1se", exact = FALSE))[2:6,1])
lasst_1se
lasso_1se
rm(list=ls())
n_covs <- 25 #number of covariates
n_obs <- 100 #number of observations
seeds <- runif(1000,min=0,max=1) #uniform draws for numbers to plug into sines in X
n_iter <- 100 #number of iterations
### initialize coefficient storage
ols_coefs <- rep(0,length=5)
lasso_min <- rep(0,length=5)
lasso_1se <- rep(0,length=5)
for(j in 1:n_iter) { #outer monte carlo loop
#### The DGP
seeds_sample <- sample(seeds, n_covs, replace=FALSE) #random sample from the seeds
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seeds_sample[i]*step) #sines - deterministic regressors
}
#### The Y variable
Y <- X[,1] + 3*X[,2] - 5*X[,3] + 7*X[,4] - 10*X[,5] + rnorm(n_obs) #linear combination of sines + gaussian noise
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
ols_coefs <- rbind(ols_coefs,as.matrix(coef(olsfit))[2:6,1]) #store coefficients from this run
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
lasso_min <- rbind(lasso_min,as.numeric(coef(lassofit, s = "lambda.min", exact = FALSE)[2:6,1])) #store coefficients from this run
lasso_1se <- rbind(lasso_1se,as.numeric(coef(lassofit, s = "lambda.1se", exact = FALSE)[2:6,1])) #store coefficients from this run
}
lasso_min
lasso_1se
ols_coefs
class(ols_coefs)
ols_coefs <- as.data.frame(ols_coefs[-1,])
lasso_min <- as.data.frame(lasso_min[-1,])
lasso_1se <- as.data.frame(lasso_1se[-1,])
ols_coefs
lasso_min
?as.data.frame
rm(list=ls())
set.seed <- 102030 #for reproducibility
n_covs <- 25 #number of covariates
n_obs <- 100 #number of observations
seeds <- runif(1000,min=0,max=1) #uniform draws for numbers to plug into sines in X
n_iter <- 100 #number of iterations
### initialize coefficient storage
ols_coefs <- rep(0,length=5)
lasso_min <- rep(0,length=5)
lasso_1se <- rep(0,length=5)
for(j in 1:n_iter) { #outer monte carlo loop
#### The DGP
seeds_sample <- sample(seeds, n_covs, replace=FALSE) #random sample from the seeds
step <- seq(from=1,to=n_obs,by=1) #time step
X <- matrix(0,nrow=n_obs,ncol=n_covs) #matrix to store sines in columns
for (i in 1:n_covs){ #loop over columns to create n_covs many deterministic regressors
X[,i] <- sinpi(seeds_sample[i]*step) #sines - deterministic regressors
}
#### The Y variable
Y <- X[,1] + 3*X[,2] - 5*X[,3] + 7*X[,4] - 10*X[,5] + rnorm(n_obs) #linear combination of sines + gaussian noise
#### OLS fit
olsfit <- lm(Y ~ X)
summary(olsfit)
ols_coefs <- rbind(ols_coefs,as.matrix(coef(olsfit))[2:6,1]) #store coefficients from this run
#### LASSO fit
lassofit <- cv.glmnet(x=X,y=Y,alpha=1,nlambda=100)
lasso_min <- rbind(lasso_min,as.numeric(coef(lassofit, s = "lambda.min", exact = FALSE)[2:6,1])) #store coefficients from this run
lasso_1se <- rbind(lasso_1se,as.numeric(coef(lassofit, s = "lambda.1se", exact = FALSE)[2:6,1])) #store coefficients from this run
}
ols_coefs
test <- as.data.frame(ols_coefs[-1,], rownames=NULL)
test
head(test)
dim(test)
test <- as.data.frame(ols_coefs[-1,], rownames=c(seq(1:dim(test)[1])))
head(test)
test
seq(1:dim(test)[1])
class(seq(1:dim(test)[1]))
class(as.character(seq(1:dim(test)[1])))
as.character(seq(1:dim(test)[1]))
test <- as.data.frame(ols_coefs[-1,], rownames=c(as.character(seq(1:dim(test)[1]))))
test
head(test)
c(as.character(seq(1:dim(test)[1])))
test <- as.data.frame(ols_coefs[-1,], rownames=as.character(seq(1:dim(test)[1])))
test
tail(test)
head(test)
test <- as.data.frame(ols_coefs[-1,], row.names=as.character(seq(1:dim(test)[1])))
test
ols_coefs <- as.data.frame(ols_coefs[-1,], row.names=as.character(seq(1:dim(test)[1])))
lasso_min <- as.data.frame(lasso_min[-1,], row.names=as.character(seq(1:dim(lasso_min)[1])))
lasso_1se <- as.data.frame(lasso_1se[-1,], row.names=as.character(seq(1:dim(lasso_min)[1])))
class(ols_coefs)
ols_coefs
lasso_min
ols_coefs$X1
ggplot(ols_coefs,aes(x=ols_coefs$X1)) + geom_histogram()
ggplot(ols_coefs,aes(x=ols_coefs$X1)) + geom_histogram(binwidth=0.5)
ggplot(lasso_min,aes(x=lasso_min$V1)) + geom_histogram(binwidth=0.5)
ggplot(lasso_min,aes(x=lasso_min$V2)) + geom_histogram(binwidth=0.5)
ggplot(lasso_min,aes(x=lasso_min$V3)) + geom_histogram(binwidth=0.5)
ggplot(lasso_min,aes(x=lasso_min$V4)) + geom_histogram(binwidth=0.5)
ggplot(lasso_min,aes(x=lasso_min$V4)) + geom_histogram(binwidth=0.1)
library(plyr)
library(reshape2)
?melt
ggplot(ols_coefs,aes(x=ols_coefs$X1)) + geom_histogram()  geom_vline(aes(xintercept=mean(ols_coefs$X1)), color="red", linetype="dashed", size=1)
ggplot(ols_coefs,aes(x=ols_coefs$X1)) + geom_histogram() + geom_vline(aes(xintercept=mean(ols_coefs$X1)), color="red", linetype="dashed", size=1)
ggplot(ols_coefs,aes(x=ols_coefs$X1)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(ols_coefs$X1)), color="red", linetype="dashed", size=1)
ols_x1 <- ggplot(ols_coefs,aes(x=ols_coefs$X1)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(ols_coefs$X1)), color="red", linetype="dashed", size=1)
ols_x2 <- ggplot(ols_coefs,aes(x=ols_coefs$X2)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(ols_coefs$X2)), color="red", linetype="dashed", size=1)
ols_x3 <- ggplot(ols_coefs,aes(x=ols_coefs$X3)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(ols_coefs$X3)), color="red", linetype="dashed", size=1)
ols_x4 <- ggplot(ols_coefs,aes(x=ols_coefs$X4)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(ols_coefs$X4)), color="red", linetype="dashed", size=1)
ols_x5 <- ggplot(ols_coefs,aes(x=ols_coefs$X5)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(ols_coefs$X5)), color="red", linetype="dashed", size=1)
ols_x6 <- ggplot(ols_coefs,aes(x=ols_coefs$X6)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(ols_coefs$X6)), color="red", linetype="dashed", size=1)
### LASSO minlambda coefficients
lasso_1se_x1 <- ggplot(lasso_min,aes(x=lasso_min$X1)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_min$X1)), color="red", linetype="dashed", size=1)
lasso_1se_x2 <- ggplot(lasso_min,aes(x=lasso_min$X2)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_min$X2)), color="red", linetype="dashed", size=1)
lasso_1se_x3 <- ggplot(lasso_min,aes(x=lasso_min$X3)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_min$X3)), color="red", linetype="dashed", size=1)
lasso_1se_x4 <- ggplot(lasso_min,aes(x=lasso_min$X4)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_min$X4)), color="red", linetype="dashed", size=1)
lasso_1se_x5 <- ggplot(lasso_min,aes(x=lasso_min$X5)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_min$X5)), color="red", linetype="dashed", size=1)
lasso_1se_x6 <- ggplot(lasso_min,aes(x=lasso_min$X6)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_min$X6)), color="red", linetype="dashed", size=1)
### LASSO 1selambda coefficients
lasso_1se_x1 <- ggplot(lasso_1se,aes(x=lasso_1se$X1)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_1se$X1)), color="red", linetype="dashed", size=1)
lasso_1se_x2 <- ggplot(lasso_1se,aes(x=lasso_1se$X2)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_1se$X2)), color="red", linetype="dashed", size=1)
lasso_1se_x3 <- ggplot(lasso_1se,aes(x=lasso_1se$X3)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_1se$X3)), color="red", linetype="dashed", size=1)
lasso_1se_x4 <- ggplot(lasso_1se,aes(x=lasso_1se$X4)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_1se$X4)), color="red", linetype="dashed", size=1)
lasso_1se_x5 <- ggplot(lasso_1se,aes(x=lasso_1se$X5)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_1se$X5)), color="red", linetype="dashed", size=1)
lasso_1se_x6 <- ggplot(lasso_1se,aes(x=lasso_1se$X6)) + geom_histogram(binwidth=0.1) + geom_vline(aes(xintercept=mean(lasso_1se$X6)), color="red", linetype="dashed", size=1)
### multiplot
# Multiple plot function - copied from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(ols_x1,ols_x2,ols_x3,ols_x4,ols_x5,ols_x6,col=2)
ols_x6
source("multiplot.r")
rm(list-ls())
rm(list=ls())
getwd()
setwd("C:/Users/Akhil/Documents/akhilrao.github.io/public/code/lassoOlsSim")
source("simulation.r")
